#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May  3 17:40:03 2019

@author: nmei

a nipype pipeline to coregistration among example_func.nii.gz, structual.nii.gz, and standard MNI

"""
import os
from glob import glob
from shutil import copyfile
copyfile('../utils.py','utils.py')


func_dir = ''
anat_dir = '../../data/MRI/{}/anat/'
ref_dir = '../../data/MRI/{}/func/session-{}/{}_unfeat_run-{}/outputs/func/example_func.nii.gz'
standard_brain = '/opt/fsl/fsl-5.0.9/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
standard_head = '/opt/fsl/fsl-5.0.9/fsl/data/standard/MNI152_T1_2mm.nii.gz'
standard_mask = '/opt/fsl/fsl-5.0.9/fsl/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz'

sub = 'sub-01'
anat_brain = os.path.abspath(glob(os.path.join(anat_dir.format(sub),'*brain*'))[0])
anat_head = os.path.abspath(glob(os.path.join(anat_dir.format(sub),'*6.nii'))[0])
func_ref = os.path.abspath(ref_dir.format(sub,'02',sub,'01'))

session = '02'
run = '01'

output_dir = '../../data/MRI/{}/func/session-{}/{}_unfeat_run-{}/outputs/reg'.format(
        sub,session,sub,run)
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

from nipype.interfaces          import fsl
from nipype.interfaces         import utility as util
from nipype.pipeline           import engine as pe
fsl.FSLCommand.set_default_output_type('NIFTI_GZ')
registration                    = pe.Workflow(name = 'registration')
inputnode                       = pe.Node(
                                    interface   = util.IdentityInterface(
                                    fields      = [
                                            'highres', # anat_brain
                                            'highres_head', # anat_head
                                            'func_ref',
                                            'standard', # standard_brain
                                            'standard_head',
                                            'standard_mask'
                                            ]),
                                    name        = 'inputspec')
outputnode                      = pe.Node(
                                interface   = util.IdentityInterface(
                                fields      = []),
                                name        = 'outputspec')
"""
fslmaths /bcbl/home/public/Consciousness/uncon_feat/data/MRI/sub-01/anat/sub-01-T1W_mprage_sag_p2_1iso_MGH_day_6_nipy_brain highres
fslmaths /bcbl/home/public/Consciousness/uncon_feat/data/MRI/sub-01/anat/sub-01-T1W_mprage_sag_p2_1iso_MGH_day_6_nipy_brain  highres_head
fslmaths /opt/fsl/fsl-5.0.9/fsl/data/standard/MNI152_T1_2mm_brain standard
fslmaths /opt/fsl/fsl-5.0.9/fsl/data/standard/MNI152_T1_2mm standard_head
fslmaths /opt/fsl/fsl-5.0.9/fsl/data/standard/MNI152_T1_2mm_brain_mask_dil standard_mask
"""
# skip

"""
/opt/fsl/fsl-5.0.10/fsl/bin/flirt 
    -in example_func 
    -ref highres 
    -out example_func2highres 
    -omat example_func2highres.mat 
    -cost corratio 
    -dof 7 
    -searchrx -180 180 
    -searchry -180 180 
    -searchrz -180 180 
    -interp trilinear 
"""
linear_example_func2highres = pe.MapNode(
                                interface   = fsl.FLIRT(cost          = 'corratio',
                                                        interp        = 'trilinear',
                                                        dof           = 7,
                                                        save_log      = True,
                                                        searchr_x     = [-180, 180],
                                                        searchr_y     = [-180, 180],
                                                        searchr_z     = [-180, 180],),
                                iterfield   = ['in_file','reference'],
                                name        = 'linear_example_func2highres')
registration.connect(inputnode,             'func_ref',
                     linear_example_func2highres, 'in_file')
registration.connect(inputnode,             'highres',
                     linear_example_func2highres, 'reference')
registration.connect(linear_example_func2highres, 'out_file',
                     outputnode,            'example_func2highres_nii_gz')
registration.connect(linear_example_func2highres, 'out_matrix_file',
                     outputnode,            'example2highres_mat')
registration.connect(linear_example_func2highres, 'out_log',
                     outputnode,            'linear_example_func2highres_log')


















































