/opt/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.
  from ._conv import register_converters as _register_converters
/opt/anaconda3/lib/python3.6/site-packages/autoreject/utils.py:19: DeprecationWarning: The 'cachedir' parameter has been deprecated in version 0.12 and will be removed in version 0.14.
You provided "cachedir='cachedir'", use "location='cachedir'" instead.
  mem = Memory(cachedir='cachedir')
/opt/anaconda3/lib/python3.6/site-packages/autoreject/autoreject.py:28: DeprecationWarning: The 'cachedir' parameter has been deprecated in version 0.12 and will be removed in version 0.14.
You provided "cachedir='cachedir'", use "location='cachedir'" instead.
  mem = Memory(cachedir='cachedir')
/opt/anaconda3/lib/python3.6/importlib/_bootstrap.py:205: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216, got 192
  return f(*args, **kwds)
/opt/anaconda3/lib/python3.6/importlib/_bootstrap.py:205: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__
  return f(*args, **kwds)
0it [00:00, ?it/s]/opt/anaconda3/lib/python3.6/site-packages/nilearn/_utils/cache_mixin.py:84: DeprecationWarning: The 'cachedir' parameter has been deprecated in version 0.12 and will be removed in version 0.14.
You provided "cachedir='nilarn_cashed'", use "location='nilarn_cashed'" instead.
  memory = Memory(cachedir=cache_dir, verbose=verbose)
/opt/anaconda3/lib/python3.6/site-packages/nilearn/_utils/cache_mixin.py:232: DeprecationWarning: The 'cachedir' attribute has been deprecated in version 0.12 and will be removed in version 0.14.
Use os.path.join(memory.location, 'joblib') attribute instead.
  if (memory.cachedir is None and memory_level is not None
1it [00:11, 11.68s/it]2it [00:23, 11.86s/it]3it [00:38, 12.54s/it]4it [00:52, 13.16s/it]5it [01:05, 12.91s/it]6it [01:19, 13.38s/it]7it [01:34, 14.01s/it]8it [01:48, 13.76s/it]9it [02:02, 13.94s/it]10it [02:16, 13.82s/it]/opt/anaconda3/lib/python3.6/site-packages/nilearn/input_data/nifti_masker.py:307: UserWarning: Persisting input arguments took 1.15s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  dtype=self.dtype
11it [02:36, 15.76s/it]12it [02:52, 15.77s/it]13it [03:11, 16.72s/it]14it [03:25, 16.03s/it]15it [03:43, 16.69s/it]16it [03:58, 15.98s/it]17it [04:13, 15.74s/it]18it [04:27, 15.33s/it]19it [04:42, 15.07s/it]20it [04:55, 14.56s/it]21it [05:09, 14.31s/it]22it [05:20, 13.42s/it]23it [05:36, 14.19s/it]24it [05:52, 14.76s/it]25it [06:06, 14.45s/it]26it [06:23, 15.22s/it]27it [06:40, 15.85s/it]28it [06:55, 15.44s/it]29it [07:07, 14.65s/it]30it [07:24, 15.29s/it]31it [07:38, 14.76s/it]32it [07:50, 13.93s/it]33it [08:04, 13.90s/it]34it [08:20, 14.64s/it]35it [08:40, 16.32s/it]36it [08:54, 15.65s/it]37it [09:08, 15.00s/it]38it [09:23, 15.05s/it]39it [09:38, 15.04s/it]40it [09:54, 15.32s/it]41it [10:10, 15.41s/it]42it [10:23, 14.81s/it]43it [10:40, 15.55s/it]44it [10:54, 14.87s/it]45it [11:07, 14.60s/it]46it [11:22, 14.44s/it]47it [11:36, 14.31s/it]48it [11:54, 15.55s/it]49it [12:13, 16.49s/it]50it [12:34, 17.92s/it]51it [12:45, 15.97s/it]52it [13:02, 16.11s/it]53it [13:17, 15.70s/it]54it [13:29, 14.62s/it]
/opt/anaconda3/lib/python3.6/site-packages/nilearn/input_data/base_masker.py:224: UserWarning: Persisting input arguments took 1.47s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  img = self._cache(masking.unmask)(X, self.mask_img_)
